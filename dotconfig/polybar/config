; Polybar config
;
; https://github.com/polybar/polybar/wiki

include-file = ~/.config/polybar/bars
include-file = ~/.config/polybar/modules

[color]
	background = #2f343f
	background-alt = #C4C7C5
	foreground = #1C1E20
	foreground-alt = #C4C7C5
	primary = #B4BC67

	white = #FFFFFF
	black = #000000
	red = #EC7875
	pink = #EC6798
	purple = #BE78D1
	blue = #75A4CD
	cyan = #00C7DF
	teal = #00B19F
	green = #61C766
	lime = #B9C244
	yellow = #EBD369
	amber = #EDB83F
	orange = #E57C46
	brown = #AC8476
	gray = #9E9E9E
	indigo = #6C77BB
	blue-gray = #6D8895

[bar/main]
	; Use either of the following command to list available outputs:
	; $ polybar -M | cut -d ':' -f 1
	; $ xrandr -q | grep " connected" | cut -d ' ' -f1
	; If no monitor is given, the primary monitor is used if it exists
	monitor =

	; Tell the Window Manager not to configure the window.
	; Use this to detach the bar if your WM is locking its size/position.
	override-redirect = false

	; Put the bar at the bottom of the screen
	bottom = false

	; Prefer fixed center position for the `modules-center` block
	; When false, the center position will be based on the size of the other blocks.
	fixed-center = true

	; Dimension defined as pixel value (e.g. 35) or percentage (e.g. 50%),
	; the percentage can optionally be extended with a pixel offset like so:
	; 50%:-10, this will result in a width or height of 50% minus 10 pixels
	width = 100%
	height = 34

	; Offset defined as pixel value (e.g. 35) or percentage (e.g. 50%)
	; the percentage can optionally be extended with a pixel offset like so:
	; 50%:-10, this will result in an offset in the x or y direction 
	; of 50% minus 10 pixels
	offset-x = 0%
	offset-y = 0%

	; Background ARGB color (e.g. #f00, #ff992a, #ddff1023)
	background = ${color.background}

	; Foreground ARGB color (e.g. #f00, #ff992a, #ddff1023)
	foreground = ${color.foreground}

	; Value used for drawing rounded corners
	; Note: This shouldn't be used together with border-size because the border 
	; doesn't get rounded
	; Individual top/bottom values can be defined using:
	;   radius-{top,bottom}
	radius-top = 0.0
	radius-bottom = 0.0

	; Under-/overline pixel size and argb color
	; Individual values can be defined using:
	;   {overline,underline}-size
	;   {overline,underline}-color
	line-size = 5
	line-color = ${color.background}

	; Values applied to all borders
	; Individual side values can be defined using:
	;   border-{left,top,right,bottom}-size
	;   border-{left,top,right,bottom}-color
	; The top and bottom borders are added to the bar height, so the effective
	; window height is:
	;   height + border-top-size + border-bottom-size
	; Meanwhile the effective window width is defined entirely by the width key and
	; the border is placed withing this area. So you effectively only have the
	; following horizontal space on the bar:
	;   width - border-right-size - border-left-size
	border-bottom-size = 0
	border-bottom-color = ${color.primary}

	; Number of spaces to add at the beginning/end of the bar
	; Individual side values can be defined using:
	;   padding-{left,right}
	padding = 0

	; Number of spaces to add before/after each module
	; Individual side values can be defined using:
	;   module-margin-{left,right}
	module-margin = 0

	; Fonts are defined using <font-name>;<vertical-offset>
	; Font names are specified using a fontconfig pattern.
	;   font-0 = NotoSans-Regular:size=8;2
	;   font-1 = MaterialIcons:size=10
	;   font-2 = Termsynu:size=8;-1
	;   font-3 = FontAwesome:size=10
	; See the Fonts wiki page for more details
	font-0 = "Terminus:size=10;3"
	font-1 = "waffle:size=10;3"

	; Modules
	modules-left = sep workspaces sep network sep cpu_bar sep memory_bar
	modules-center = title
	modules-right = backlight sep battery sep pulseaudio sep keyboard sep date sep

[global/wm]
	margin-top = 0
	margin-bottom = 0

[settings]
	; Reload upon receiving XCB_RANDR_SCREEN_CHANGE_NOTIFY events
	screenchange-reload = true
